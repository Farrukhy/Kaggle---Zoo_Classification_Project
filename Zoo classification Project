{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":1114,"sourceType":"datasetVersion","datasetId":586}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"### GitHub Repository\n\nThe full code for this project is also available on [GitHub](https://github.com/Farrukhy/Kaggle---Zoo_Classification_Project/tree/main).\n","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\nclass_data = pd.read_csv(\"/kaggle/input/zoo-animal-classification/class.csv\")\nzoo_data = pd.read_csv(\"/kaggle/input/zoo-animal-classification/zoo.csv\")\nX = zoo_data.iloc[:, :-1].values\ny = zoo_data.iloc[:, -1].values\nzoo_data.head(10)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-22T06:19:14.907703Z","iopub.execute_input":"2024-09-22T06:19:14.908030Z","iopub.status.idle":"2024-09-22T06:19:15.313603Z","shell.execute_reply.started":"2024-09-22T06:19:14.907994Z","shell.execute_reply":"2024-09-22T06:19:15.312656Z"}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"class_data.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-09-22T06:19:15.315244Z","iopub.execute_input":"2024-09-22T06:19:15.315625Z","iopub.status.idle":"2024-09-22T06:19:15.328234Z","shell.execute_reply.started":"2024-09-22T06:19:15.315591Z","shell.execute_reply":"2024-09-22T06:19:15.326632Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   Class_Number  Number_Of_Animal_Species_In_Class    Class_Type  \\\n0             1                                 41        Mammal   \n1             2                                 20          Bird   \n2             3                                  5       Reptile   \n3             4                                 13          Fish   \n4             5                                  4     Amphibian   \n5             6                                  8           Bug   \n6             7                                 10  Invertebrate   \n\n                                        Animal_Names  \n0  aardvark, antelope, bear, boar, buffalo, calf,...  \n1  chicken, crow, dove, duck, flamingo, gull, haw...  \n2    pitviper, seasnake, slowworm, tortoise, tuatara  \n3  bass, carp, catfish, chub, dogfish, haddock, h...  \n4                             frog, frog, newt, toad  \n5  flea, gnat, honeybee, housefly, ladybird, moth...  \n6  clam, crab, crayfish, lobster, octopus, scorpi...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Class_Number</th>\n      <th>Number_Of_Animal_Species_In_Class</th>\n      <th>Class_Type</th>\n      <th>Animal_Names</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>41</td>\n      <td>Mammal</td>\n      <td>aardvark, antelope, bear, boar, buffalo, calf,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>20</td>\n      <td>Bird</td>\n      <td>chicken, crow, dove, duck, flamingo, gull, haw...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>5</td>\n      <td>Reptile</td>\n      <td>pitviper, seasnake, slowworm, tortoise, tuatara</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>13</td>\n      <td>Fish</td>\n      <td>bass, carp, catfish, chub, dogfish, haddock, h...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>4</td>\n      <td>Amphibian</td>\n      <td>frog, frog, newt, toad</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>8</td>\n      <td>Bug</td>\n      <td>flea, gnat, honeybee, housefly, ladybird, moth...</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>10</td>\n      <td>Invertebrate</td>\n      <td>clam, crab, crayfish, lobster, octopus, scorpi...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\nzoo_data['animal_name_encoded'] = le.fit_transform(zoo_data['animal_name'])\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T06:19:15.330413Z","iopub.execute_input":"2024-09-22T06:19:15.330948Z","iopub.status.idle":"2024-09-22T06:19:16.508382Z","shell.execute_reply.started":"2024-09-22T06:19:15.330893Z","shell.execute_reply":"2024-09-22T06:19:16.507410Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"frequency = zoo_data['animal_name'].value_counts()\nzoo_data['animal_name_encoded'] = zoo_data['animal_name'].map(frequency)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T06:19:16.509851Z","iopub.execute_input":"2024-09-22T06:19:16.510589Z","iopub.status.idle":"2024-09-22T06:19:16.521200Z","shell.execute_reply.started":"2024-09-22T06:19:16.510554Z","shell.execute_reply":"2024-09-22T06:19:16.520224Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"print(zoo_data['animal_name'].unique())\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T06:19:16.523737Z","iopub.execute_input":"2024-09-22T06:19:16.524111Z","iopub.status.idle":"2024-09-22T06:19:16.532902Z","shell.execute_reply.started":"2024-09-22T06:19:16.524068Z","shell.execute_reply":"2024-09-22T06:19:16.531931Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"['aardvark' 'antelope' 'bass' 'bear' 'boar' 'buffalo' 'calf' 'carp'\n 'catfish' 'cavy' 'cheetah' 'chicken' 'chub' 'clam' 'crab' 'crayfish'\n 'crow' 'deer' 'dogfish' 'dolphin' 'dove' 'duck' 'elephant' 'flamingo'\n 'flea' 'frog' 'fruitbat' 'giraffe' 'girl' 'gnat' 'goat' 'gorilla' 'gull'\n 'haddock' 'hamster' 'hare' 'hawk' 'herring' 'honeybee' 'housefly' 'kiwi'\n 'ladybird' 'lark' 'leopard' 'lion' 'lobster' 'lynx' 'mink' 'mole'\n 'mongoose' 'moth' 'newt' 'octopus' 'opossum' 'oryx' 'ostrich' 'parakeet'\n 'penguin' 'pheasant' 'pike' 'piranha' 'pitviper' 'platypus' 'polecat'\n 'pony' 'porpoise' 'puma' 'pussycat' 'raccoon' 'reindeer' 'rhea'\n 'scorpion' 'seahorse' 'seal' 'sealion' 'seasnake' 'seawasp' 'skimmer'\n 'skua' 'slowworm' 'slug' 'sole' 'sparrow' 'squirrel' 'starfish'\n 'stingray' 'swan' 'termite' 'toad' 'tortoise' 'tuatara' 'tuna' 'vampire'\n 'vole' 'vulture' 'wallaby' 'wasp' 'wolf' 'worm' 'wren']\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","metadata":{"execution":{"iopub.status.busy":"2024-09-22T06:19:16.534124Z","iopub.execute_input":"2024-09-22T06:19:16.534448Z","iopub.status.idle":"2024-09-22T06:19:16.633919Z","shell.execute_reply.started":"2024-09-22T06:19:16.534417Z","shell.execute_reply":"2024-09-22T06:19:16.632919Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n\n# If X_train and X_test are numpy arrays, they need to be sliced \nX_train_scaled = X_train[:, 1:]  \nX_test_scaled = X_test[:, 1:]    \n\n\nsc = StandardScaler()\nX_train_scaled = sc.fit_transform(X_train_scaled)\nX_test_scaled = sc.transform(X_test_scaled)","metadata":{"execution":{"iopub.status.busy":"2024-09-22T07:13:41.789909Z","iopub.execute_input":"2024-09-22T07:13:41.790420Z","iopub.status.idle":"2024-09-22T07:13:41.797787Z","shell.execute_reply.started":"2024-09-22T07:13:41.790371Z","shell.execute_reply":"2024-09-22T07:13:41.796839Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nclassification = LogisticRegression(random_state = 0)\nclassification.fit(X_train_scaled, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-22T07:14:22.499817Z","iopub.execute_input":"2024-09-22T07:14:22.500185Z","iopub.status.idle":"2024-09-22T07:14:22.602458Z","shell.execute_reply.started":"2024-09-22T07:14:22.500130Z","shell.execute_reply":"2024-09-22T07:14:22.601577Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"LogisticRegression(random_state=0)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=0)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classification.predict(X_test_scaled)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-09-22T07:17:00.259234Z","iopub.execute_input":"2024-09-22T07:17:00.259891Z","iopub.status.idle":"2024-09-22T07:17:00.274017Z","shell.execute_reply.started":"2024-09-22T07:17:00.259853Z","shell.execute_reply":"2024-09-22T07:17:00.272950Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"[[7 0 0 0 0 0]\n [0 4 0 0 0 0]\n [0 0 5 0 0 0]\n [0 0 0 1 0 0]\n [0 0 0 0 2 0]\n [0 0 0 0 0 2]]\n","output_type":"stream"},{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"1.0"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T07:19:30.839551Z","iopub.execute_input":"2024-09-22T07:19:30.840244Z","iopub.status.idle":"2024-09-22T07:19:30.854043Z","shell.execute_reply.started":"2024-09-22T07:19:30.840205Z","shell.execute_reply":"2024-09-22T07:19:30.853090Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n           1       1.00      1.00      1.00         7\n           2       1.00      1.00      1.00         4\n           4       1.00      1.00      1.00         5\n           5       1.00      1.00      1.00         1\n           6       1.00      1.00      1.00         2\n           7       1.00      1.00      1.00         2\n\n    accuracy                           1.00        21\n   macro avg       1.00      1.00      1.00        21\nweighted avg       1.00      1.00      1.00        21\n\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=classification, X=X_train_scaled, y=y_train, cv=10)\nprint(f\"Cross-validation mean accuracy: {accuracies.mean()}\")\nprint(f\"Cross-validation std deviation: {accuracies.std()}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T07:22:15.659153Z","iopub.execute_input":"2024-09-22T07:22:15.659548Z","iopub.status.idle":"2024-09-22T07:22:15.766784Z","shell.execute_reply.started":"2024-09-22T07:22:15.659511Z","shell.execute_reply":"2024-09-22T07:22:15.765854Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Cross-validation mean accuracy: 0.9375\nCross-validation std deviation: 0.10077822185373188\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/model_selection/_split.py:700: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=10.\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}